- name: Integration tests for flavor_info module against mock OpenStack
  hosts: localhost
  gather_facts: false
  vars:
    go_server_path: tests/integration/fake/openstack/srv.go
    server_url_file: /tmp/fake_os_url.txt
    server_pid_file: /tmp/fake_os_server.pid
    cloud_config:
      auth_url: "{{ fake_os_url }}/v3"
      username: "demo-user"
      password: "password"
      project_name: "demo"
      project_id: "demo-id"
      user_domain_name: "default"
      project_domain_name: "default"
      region_name: "RegionOne"
  tasks:
# SETUP FOR FAKE SERVER
    - name: Start fake OpenStack server asynchronously
      ansible.builtin.command: go run "{{ go_server_path }}"
      args:
        creates: "{{ server_pid_file }}"
      async: 30
      poll: 0
      register: fake_server_job

    - name: Wait for the server URL file to be created
      ansible.builtin.wait_for:
        path: "{{ server_url_file }}"
        state: present
        timeout: 10

    - name: Read the server URL from the file
      ansible.builtin.slurp:
        src: "{{ server_url_file }}"
      register: fake_os_url_b64
      failed_when: fake_os_url_b64.rc != 0

    - name: Set the server URL fact
      ansible.builtin.set_fact:
        fake_os_url: "{{ fake_os_url_b64['content'] | b64decode }}"

    - name: Read the server PID from the file
      ansible.builtin.slurp:
        src: "{{ server_pid_file }}"
      register: fake_os_pid_b64
      failed_when: fake_os_pid_b64.rc != 0

    - name: Set the server PID fact
      ansible.builtin.set_fact:
        fake_os_pid: "{{ fake_os_pid_b64['content'] | b64decode }}"
# TESTS SCENARIOS WIP
    - name: Run test scenarios
      block:
        - name: "TEST01: Find flavors by name"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config }}"
            flavor_name: "{{ item.name }}"
          loop:
            - { name: 'small', ram: 2048, vcpus: 1, disk: 20 }
            - { name: 'medium', ram: 4096, vcpus: 2, disk: 40 }
            - { name: 'large', ram: 8192, vcpus: 4, disk: 80 }
          register: result_by_name
        - name: "ASSERT: All flavors were found correctly by name"
          ansible.builtin.assert:
            that:
              - "item.results[0].flavors[0].name == item.item.name"
              - "item.results[0].flavors[0].ram == item.item.ram"
              - "item.results[0].flavors[0].vcpus == item.item.vcpus"
              - "item.results[0].flavors[0].disk == item.item.Disk"
          loop: "{{ result_by_name.results }}"

        - name: "TEST02: Find flavors by ID"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config }}"
            flavor_id: "{{ item.id }}"
          loop:
            - { id: '1', name: 'small' }
            - { id: '2', name: 'medium' }
            - { id: '3', name: 'large' }
          register: result_by_id
        - name: "ASSERT: All flavors were found correctly by ID"
          ansible.builtin.assert:
            that:
              - "item.flavor is defined"
              - "item.flavor.id == item.item.id"
              - "item.flavor.name == item.item.name"
          loop: "{{ result_by_id.results }}"

        - name: "TEST03: List all flavors"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config }}"
          register: result_all_flavors
        - name: "ASSERT: All three flavors were returned"
          ansible.builtin.assert:
            that:
              - "result_all_flavors.flavors | length == 3"

        - name: "TEST04: non-existent flavor by name"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config }}"
            flavor_name: "non-existent-flavor"
          register: result_non_existent
        - name: "ASSERT: Non-existent flavor returns an empty list"
          ansible.builtin.assert:
            that:
              - "result_non_existent.flavors | length == 0"

        - name: "TEST05: Invalid credentials"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config | combine({'password': 'wrong-password'}) }}"
          register: result_bad_auth
          failed_when: false
        - name: "ASSERT: Invalid credentials cause an authentication error"
          ansible.builtin.assert:
            that:
              - "result_bad_auth.failed"
              - "'authentication failed' in result_bad_auth.msg | lower"

        - name: "TEST06: empty flavor name"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config }}"
            flavor_name: ""
          register: result_empty_name
        - name: "ASSERT: Empty flavor name returns an empty list"
          ansible.builtin.assert:
            that:
              - "result_empty_name.flavors | length == 0"

        - name: "TEST07: Verify detailed properties of all flavors"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config }}"
            flavor_name: "{{ item.name }}"
          loop:
            - { name: 'small', id: '1', ram: 2048, vcpus: 1, disk: 20 }
            - { name: 'medium', id: '2', ram: 4096, vcpus: 2, disk: 40 }
            - { name: 'large', id: '3', ram: 8192, vcpus: 4, disk: 80 }
          register: result_details
        - name: "ASSERT: All flavors have correct and detailed properties"
          ansible.builtin.assert:
            that:
              - "item.flavors[0].name == item.item.name"
              - "item.flavors[0].id == item.item.id"
              - "item.flavors[0].ram == item.item.ram"
              - "item.flavors[0].ram is integer"
              - "item.flavors[0].vcpus == item.item.vcpus"
              - "item.flavors[0].vcpus is integer"
              - "item.flavors[0].disk == item.item.disk"
              - "item.flavors[0].disk is integer"
          loop: "{{ result_details.results }}"

        - name: "TEST08: Case sensitivity test by name"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config }}"
            flavor_name: "{{ item.input_name }}"
          loop:
            - { input_name: 'Small', expected_name: 'small' }
            - { input_name: 'Medium', expected_name: 'medium' }
            - { input_name: 'Large', expected_name: 'large' }
          register: result_case
        - name: "ASSERT: Case-insensitive search finds the correct flavor"
          ansible.builtin.assert:
            that:
              - "item.flavors[0].name == item.item.expected_name"
          loop: "{{ result_case.results }}"

        - name: "TEST09: All flavors with leading/trailing whitespace"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config }}"
            flavor_name: "{{ item.input_name }}"
          loop:
            - { input_name: ' small ', expected_name: 'small' }
            - { input_name: ' medium ', expected_name: 'medium' }
            - { input_name: ' large ', expected_name: 'large' }
          register: result_whitespace
        - name: "ASSERT: Leading/trailing whitespace is trimmed correctly for all flavors"
          ansible.builtin.assert:
            that:
              - "item.flavors[0].name == item.item.expected_name"
          loop: "{{ result_whitespace.results }}"

        - name: "TEST10: Connection failure"
          os_migrate.vmware_migration_kit.flavor_info:
            cloud: "{{ cloud_config | combine({'auth_url': 'http://127.0.0.1:12345'}) }}"
          register: result_connection_fail
          failed_when: false
        - name: "ASSERT: Connection failure produces the correct error message"
          ansible.builtin.assert:
            that:
              - "result_connection_fail.failed"
              - "'connection refused' in result_connection_fail.msg | lower"
# CLEANUP
      always:
        - name: Stop fake OpenStack server
          ansible.builtin.command: "kill {{ fake_os_pid }}"
          changed_when: false
          failed_when: false

        - name: Clean URL and PID files
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ server_url_file }}"
            - "{{ server_pid_file }}"

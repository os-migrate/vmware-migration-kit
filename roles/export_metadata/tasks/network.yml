---
- name: Extract vm_info
  ansible.builtin.slurp:
    src: "{{ os_migrate_vmw_data_dir }}/{{ vm_name }}/guest_info.json"
  register: vm_info_file

- name: Decode and parse vm_info_file
  ansible.builtin.set_fact:
    vm_info_file: "{{ vm_info_file.content | b64decode | from_json }}"

- name: Extract vlan info for network mapping
  when: used_mapped_networks
  block:
    - name: Dump network_info to json file
      ansible.builtin.copy:
        content: >-
          {{
            vm_info_file
            | dict2items
            | selectattr('key', 'match', '^hw_eth[0-9]+$')
            | map(attribute='value')
            | list
            | to_nice_json
          }}
        dest: "{{ os_migrate_vmw_data_dir }}/{{ vm_name }}/network_info.json"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      when: used_mapped_networks|default(true)|bool

    - name: Extract nic info based on network_map
      ansible.builtin.set_fact:
        guest_nic: >-
          {{ guest_nic | default([]) + [{
                'vlan': mapped_vlan,
                'mac': vm_info_file[item].macaddress
          }] }}
      loop: "{{ vm_info_file.keys() | select('match', '^hw_eth[0-9]+$') | list }}"
      vars:
        mapped_vlan: "{{ network_map.get(vm_info_file[item].summary, 'UNMAPPED') }}"
      when:
        - mapped_vlan != 'UNMAPPED'
        - used_mapped_networks|default(true)|bool

    - name: Dump guest_nic to json file
      ansible.builtin.copy:
        content: "{{ guest_nic }}"
        dest: "{{ os_migrate_vmw_data_dir }}/{{ vm_name }}/nics.json"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      when: used_mapped_networks|default(true)|bool

- name: Extract macs addresses for non mapped networks
  when: not used_mapped_networks
  block:

    - name: Initialize guest_mac variable
      ansible.builtin.set_fact:
        guest_mac: []
      when: not used_mapped_networks|default(true)|bool

    - name: Loop through MAC addresses and build guest_mac list
      ansible.builtin.set_fact:
        guest_mac: "{{ guest_mac + [{'mac': vm_info_file[item].macaddress}] }}"
      loop: "{{ vm_info_file.keys() | select('match', '^hw_eth[0-9]+$') | list }}"
      when: not used_mapped_networks|default(true)|bool

    - name: Dump guest_mac to json file
      ansible.builtin.copy:
        content: "{{ guest_mac }}"
        dest: "{{ os_migrate_vmw_data_dir }}/{{ vm_name }}/macs.json"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      when: not used_mapped_networks|default(true)|bool
